{"name":"12factor Dotenv for Node","tagline":"Discover and automagically load .env files, include them into process.env, and validate with 12factor-config","body":"[![npm version](https://badge.fury.io/js/12factor-dotenv.svg)](https://npmjs.org/package/12factor-dotenv \"View this project on NPM\")\r\n[![Build Status](https://img.shields.io/travis/electblake/node-12factor-dotenv.svg?branch=master)](http://travis-ci.org/electblake/node-12factor-dotenv \"Check this project's build status on TravisCI\")\r\n\r\n[![NPM downloads](https://img.shields.io/npm/dm/12factor-dotenv.svg)](https://npmjs.org/package/12factor-dotenv \"View this project on NPM\")\r\n\r\n\r\n## Automagically Load Dotenv Files (`.env`)\r\n\r\nThis module looks for `.env` files loads them with [node-env-file](https://www.npmjs.com/package/node-env-file) and returns a [12factor-config](https://www.npmjs.com/package/12factor-config)\r\n\r\n**Features**\r\n\r\n* relative to parent module\r\n\t* note: Parent module is one that requires 12factor-dotenv\r\n* loads `.env` files in an ascending relative path:\r\n\t* `./`\r\n\t* `../`\r\n\t* `../../`\r\n\r\n\r\n# Install\r\n`npm install 12factor-dotenv --save`\r\n\r\n\r\n# Config schema\r\n\r\nThis module uses 12factor-config to manage a config schema, for configuration support.\r\n\r\n[Read More](https://www.npmjs.com/package/12factor-config) about setting up configuration schema at the [12factor-config](https://www.npmjs.com/package/12factor-config) package.\r\n\r\n# Usage\r\n\r\nin a single config file (obey 12factor and unify your config location), do something like:\r\n\r\n```\r\n// in ./app/lib/config.js\r\n\r\nvar config = require('12factor-dotenv');\r\nvar schema = {\r\n\tDEBUG: {\r\n\t\tenv: 'DEBUG', // the environment export var to read\r\n\t\ttype: 'boolean', // config var type (string, integer, boolean - maybe more see 12factor-config)\r\n\t\tdefault: false\r\n\t},\r\n\tPORT: {\r\n\t\tenv: 'PORT',\r\n\t\ttype: 'integer',\r\n\t\tdefault: 4000\r\n\t},\r\n\tMY_CUSTOM_VAR: {\r\n\t\tenv: 'MY_LOCAL_ENVIRONMENT_EXPORT_VAR',\r\n\t\ttype: 'string'\r\n\t},\r\n\tNODE_ENV: {\r\n\t\tenv: 'NODE_ENV',\r\n\t\ttype: 'string',\r\n\t\tdefault: 'development'\r\n\t}\r\n};\r\n\r\nvar cfg = config(schema, { debug: true });\r\n\r\nconsole.log('info: -- PORT is', cfg.PORT);\r\nconsole.log('info: -- NODE_ENV is', cfg.NODE_ENV);\r\n\r\nconsole.log('debug: -- ENV Debug is', process.env.DEBUG);\r\nconsole.log('debug: -- ENV Port is', process.env.PORT);\r\n\r\nconsole.log('info: < Configured.');\r\n\r\nmodule.exports = exports = cfg;\r\n\r\n```\r\n\r\nnow `var cfg = require('./path/to/app/lib/config.js');` wherever you want your unified config - and keep .env(s) updated per environment.\r\n\r\n## Tips\r\n\r\n\r\nI personally enjoy using `global.__config = require('./path/to/config.js');` and accessing it throughout my app through a single global. It becomes 1 line in your super simple app bootstrapping code.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}